Index: go/src/cmd/link/internal/ld/lib.go
===================================================================
--- go.orig/src/cmd/link/internal/ld/lib.go
+++ go/src/cmd/link/internal/ld/lib.go
@@ -850,6 +850,28 @@ func hostlinksetup() {
 	coutbuf.f = f
 }
 
+func myCopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error) {
+	written, err = io.Copy(dst, io.LimitReader(src, n))
+	if written == n {
+		return n, nil
+	}
+	if err != nil {
+		return
+	}
+	// try again
+	var nw int64
+	nw, err = io.Copy(dst, io.LimitReader(src, n-written))
+	written = written + nw
+	if written == n {
+		return n, nil
+	}
+	if written < n && err == nil {
+		// src stopped early; must have been EOF.
+		err = io.EOF
+	}
+	return
+}
+
 // hostobjCopy creates a copy of the object files in hostobj in a
 // temporary directory.
 func hostobjCopy() (paths []string) {
@@ -868,8 +890,9 @@ func hostobjCopy() (paths []string) {
 		if err != nil {
 			Exitf("cannot create %s: %v", p, err)
 		}
-		if _, err := io.CopyN(w, f, h.length); err != nil {
-			Exitf("cannot write %s: %v", p, err)
+		if nw, err := myCopyN(w, f, h.length); err != nil {
+			Exitf("copy from %s(%s) to %s failed: %v (len=%d, copied=%d)",
+				h.file, h.pn, p, err, h.length, nw)
 		}
 		if err := w.Close(); err != nil {
 			Exitf("cannot close %s: %v", p, err)
